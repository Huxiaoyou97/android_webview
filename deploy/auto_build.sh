#!/bin/bash

# Ëá™Âä®ÊâìÂåÖËÑöÊú¨ - Android WebApp (ÊîØÊåÅÂ§öÂüüÂêç)
# ‰ΩøÁî®ÊñπÊ≥ïÔºö./auto_build.sh

# ËÑöÊú¨ÁõÆÂΩï
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Ê£ÄÊµãÊòØÂê¶Âú®DockerÁéØÂ¢É‰∏≠
if [ -d "/app/workspace" ] && [ "$SCRIPT_DIR" = "/app" ]; then
    # DockerÁéØÂ¢É‰∏≠ÁöÑË∑ØÂæÑ
    PROJECT_DIR="/app/workspace"
    SCRIPT_DIR="/app"
else
    # Êú¨Âú∞ÁéØÂ¢É‰∏≠ÁöÑË∑ØÂæÑ
    PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
fi

# !!!! ÂÖ≥ÈîÆ‰øÆÂ§çÔºöÁ°Æ‰øùÂéüÂßãJavaÊñá‰ª∂Â≠òÂú® !!!!
echo "üîß Ê£ÄÊü•Âπ∂ÊÅ¢Â§çÂéüÂßãJavaÊñá‰ª∂..."
ORIGINAL_JAVA_DIR="$PROJECT_DIR/app/src/main/java/com/jsmiao/webapp"

# ËØ¶ÁªÜÊ£ÄÊü•ÊØè‰∏™Êñá‰ª∂
echo "  Ê£ÄÊü•Êñá‰ª∂Áä∂ÊÄÅ:"
echo "    ÁõÆÂΩï: $ORIGINAL_JAVA_DIR"
echo "    MainActivity.java: $([ -f "$ORIGINAL_JAVA_DIR/MainActivity.java" ] && echo "Â≠òÂú®" || echo "Áº∫Â§±")"
echo "    MyApplication.java: $([ -f "$ORIGINAL_JAVA_DIR/MyApplication.java" ] && echo "Â≠òÂú®" || echo "Áº∫Â§±")"  
echo "    MWebView.java: $([ -f "$ORIGINAL_JAVA_DIR/controls/MWebView.java" ] && echo "Â≠òÂú®" || echo "Áº∫Â§±")"

# Âº∫Âà∂Ê£ÄÊü• - Âè™Ë¶Å‰ªª‰Ωï‰∏Ä‰∏™Êñá‰ª∂Áº∫Â§±Â∞±ÊÅ¢Â§ç
NEED_RESTORE=false
if [ ! -f "$ORIGINAL_JAVA_DIR/MainActivity.java" ]; then
    echo "    MainActivity.java Áº∫Â§±ÔºåÈúÄË¶ÅÊÅ¢Â§ç"
    NEED_RESTORE=true
fi
if [ ! -f "$ORIGINAL_JAVA_DIR/MyApplication.java" ]; then
    echo "    MyApplication.java Áº∫Â§±ÔºåÈúÄË¶ÅÊÅ¢Â§ç"  
    NEED_RESTORE=true
fi
if [ ! -f "$ORIGINAL_JAVA_DIR/controls/MWebView.java" ]; then
    echo "    MWebView.java Áº∫Â§±ÔºåÈúÄË¶ÅÊÅ¢Â§ç"
    NEED_RESTORE=true
fi

if [ "$NEED_RESTORE" = "true" ]; then
    echo "  Ê£ÄÊµãÂà∞JavaÊñá‰ª∂Áº∫Â§±ÔºåÊ≠£Âú®ÊÅ¢Â§ç..."
    mkdir -p "$ORIGINAL_JAVA_DIR/controls"
    
    # Á°ÆÂÆöÂ§á‰ªΩÊñá‰ª∂Ë∑ØÂæÑ
    if [ -d "/app/workspace" ] && [ "$SCRIPT_DIR" = "/app" ]; then
        BACKUP_DIR="/app/workspace/deploy/backups"
    else
        BACKUP_DIR="$SCRIPT_DIR/backups"
    fi
    
    # ‰ªéÂ§á‰ªΩÊÅ¢Â§çMainActivity.java
    if [ -f "$BACKUP_DIR/MainActivity.java.backup" ]; then
        cp "$BACKUP_DIR/MainActivity.java.backup" "$ORIGINAL_JAVA_DIR/MainActivity.java"
        echo "  ‚úÖ MainActivity.java Â∑≤‰ªéÂ§á‰ªΩÊÅ¢Â§ç"
    else
        echo "  ‚ùå Â§á‰ªΩÊñá‰ª∂‰∏çÂ≠òÂú®: $BACKUP_DIR/MainActivity.java.backup"
        echo "  Ê≠£Âú®ÂàõÂª∫ÈªòËÆ§ÁöÑMainActivity.java..."
        cat > "$ORIGINAL_JAVA_DIR/MainActivity.java" << 'EOF'
package com.jsmiao.webapp;

import android.annotation.SuppressLint;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.WindowManager;
import android.webkit.ValueCallback;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.jsmiao.webapp.controls.MWebView;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "MainActivity";

    private MWebView mWebView;
    private static final int FILE_CHOOSER_RESULT_CODE = 1;
    private ValueCallback<Uri[]> filePathCallback;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

        mWebView = (MWebView) findViewById(R.id.mWebView);
        mWebView.setActivity(this);

        setupWebView();

        String url = "https://www.google.com/";
        mWebView.loadUrl(url);
        injectParamsToLocalStorage();
    }

    @SuppressLint("SetJavaScriptEnabled")
    private void setupWebView() {
        mWebView.getSettings().setJavaScriptEnabled(true);

        mWebView.setWebViewClient(new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                if (url.startsWith("http") || url.startsWith("https")) {
                    return false;
                } else {
                    try {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
                        startActivity(intent);
                    } catch (Exception e) {
                        Toast.makeText(MainActivity.this, "Êó†Ê≥ïÊâìÂºÄËØ•ÈìæÊé•ÔºåËØ∑Ê£ÄÊü•ÊòØÂê¶ÂÆâË£Ö‰∫ÜÁõ∏Â∫îÁöÑÂ∫îÁî®", Toast.LENGTH_SHORT).show();
                    }
                    return true;
                }
            }

            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
                injectParamsToLocalStorage();
            }
        });

        mWebView.setWebChromeClient(new WebChromeClient() {
            @Override
            public void onProgressChanged(WebView view, int newProgress) {
                super.onProgressChanged(view, newProgress);
            }

            @Override
            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback,
                    FileChooserParams fileChooserParams) {
                MainActivity.this.filePathCallback = filePathCallback;

                Intent intent = fileChooserParams.createIntent();
                try {
                    startActivityForResult(intent, FILE_CHOOSER_RESULT_CODE);
                } catch (ActivityNotFoundException e) {
                    filePathCallback.onReceiveValue(null);
                    return false;
                }
                return true;
            }
        });
    }

    private void injectParamsToLocalStorage() {
        mWebView.evaluateJavascript("localStorage.setItem('web_app', '1');", null);
    }

    @Override
    public void onBackPressed() {
        if (mWebView.canGoBack()) {
            mWebView.goBack();
        } else {
            super.onBackPressed();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == FILE_CHOOSER_RESULT_CODE) {
            if (filePathCallback != null) {
                Uri[] results = null;

                if (resultCode == RESULT_OK && data != null) {
                    String dataString = data.getDataString();
                    if (dataString != null) {
                        results = new Uri[] { Uri.parse(dataString) };
                    }
                }

                filePathCallback.onReceiveValue(results);
                filePathCallback = null;
            }
        }
    }
}
EOF
    fi
    
    # ÂàõÂª∫MyApplication.java
    if [ ! -f "$ORIGINAL_JAVA_DIR/MyApplication.java" ]; then
        cat > "$ORIGINAL_JAVA_DIR/MyApplication.java" << 'EOF'
package com.jsmiao.webapp;

import android.app.Application;

public class MyApplication extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
    }
}
EOF
        echo "  ‚úÖ MyApplication.java Â∑≤ÂàõÂª∫"
    fi
    
    # ÂàõÂª∫MWebView.java
    if [ ! -f "$ORIGINAL_JAVA_DIR/controls/MWebView.java" ]; then
        cat > "$ORIGINAL_JAVA_DIR/controls/MWebView.java" << 'EOF'
package com.jsmiao.webapp.controls;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.os.Build;
import android.util.AttributeSet;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;

public class MWebView extends WebView {
    private Activity mActivity;

    public MWebView(Context context) {
        super(context);
        init();
    }

    public MWebView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public MWebView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

    public void setActivity(Activity activity) {
        this.mActivity = activity;
    }

    @SuppressLint("SetJavaScriptEnabled")
    private void init() {
        WebSettings webSettings = getSettings();
        webSettings.setJavaScriptEnabled(true);
        webSettings.setUseWideViewPort(true);
        webSettings.setLoadWithOverviewMode(true);
        webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);
        webSettings.setDomStorageEnabled(true);
        webSettings.setAllowFileAccess(true);
        webSettings.setAllowContentAccess(true);
        webSettings.setDefaultTextEncodingName("utf-8");
        webSettings.setAllowFileAccessFromFileURLs(false);
        webSettings.setAllowUniversalAccessFromFileURLs(false);
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
            WebView.setWebContentsDebuggingEnabled(true);
        }

        setWebViewClient(new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                if (url.startsWith("http:") || url.startsWith("https:")) {
                    return false;
                }
                return true;
            }

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                super.onPageStarted(view, url, favicon);
            }

            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
            }
        });

        setWebChromeClient(new WebChromeClient() {
            @Override
            public void onProgressChanged(WebView view, int newProgress) {
                super.onProgressChanged(view, newProgress);
            }

            @Override
            public void onReceivedTitle(WebView view, String title) {
                super.onReceivedTitle(view, title);
            }
        });
    }
}
EOF
        echo "  ‚úÖ MWebView.java Â∑≤ÂàõÂª∫"
    fi
    
    echo "  ‚úÖ ÊâÄÊúâÂéüÂßãJavaÊñá‰ª∂Â∑≤Á°Æ‰øùÂ≠òÂú®"
else
    echo "  ‚úÖ ÂéüÂßãJavaÊñá‰ª∂Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÊÅ¢Â§ç"
fi

# Ê∏ÖÁêÜ‰πãÂâçÊûÑÂª∫ÁöÑÈùûÂéüÂßãÂåÖÂêçÁõÆÂΩï
echo "üßπ Ê∏ÖÁêÜ‰πãÂâçÊûÑÂª∫ÁöÑÂåÖÂêçÁõÆÂΩï..."
JAVA_DIR="$PROJECT_DIR/app/src/main/java"
if [ -d "$JAVA_DIR" ]; then
    # Âè™Âà†Èô§ÈùûÂéüÂßãÂåÖÂêçÁöÑJavaÊñá‰ª∂Ôºå‰øùÁïôÂéüÂßãÊñá‰ª∂
    find "$JAVA_DIR" -type f -name "*.java" ! -path "*/com/jsmiao/webapp/*" -delete 2>/dev/null || true
    # Âà†Èô§Á©∫ÁõÆÂΩï
    find "$JAVA_DIR" -type d -empty -delete 2>/dev/null || true
fi

# üîß ÊÅ¢Â§çactivity_main.xmlÂà∞ÂéüÂßãÁä∂ÊÄÅ
echo "üîß ÊÅ¢Â§çactivity_main.xmlÂà∞ÂéüÂßãÁä∂ÊÄÅ..."
ACTIVITY_MAIN_FILE="$PROJECT_DIR/app/src/main/res/layout/activity_main.xml"
if [ -f "$ACTIVITY_MAIN_FILE" ]; then
    # Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ÈùûÂéüÂßãÂåÖÂêçÁöÑMWebViewÂºïÁî®
    if ! grep -q "com\.jsmiao\.webapp\.controls\.MWebView" "$ACTIVITY_MAIN_FILE"; then
        echo "  Ê£ÄÊµãÂà∞activity_main.xmlÂåÖÂê´ÈùûÂéüÂßãÂåÖÂêçÂºïÁî®ÔºåÊ≠£Âú®ÊÅ¢Â§ç..."
        # ÊÅ¢Â§çÂºÄÂßãÊ†áÁ≠æÂíåÁªìÊùüÊ†áÁ≠æÁöÑÂåÖÂêçÂºïÁî®
        sed -i.tmp 's|<[^[:space:]>]*\.controls\.MWebView|<com.jsmiao.webapp.controls.MWebView|g; s|</[^[:space:]>]*\.controls\.MWebView|</com.jsmiao.webapp.controls.MWebView|g' "$ACTIVITY_MAIN_FILE"
        rm -f "$ACTIVITY_MAIN_FILE.tmp"
        echo "  ‚úÖ activity_main.xmlÂ∑≤ÊÅ¢Â§çÂà∞ÂéüÂßãÁä∂ÊÄÅ"
    else
        echo "  ‚úÖ activity_main.xmlÂ∑≤ÊòØÂéüÂßãÁä∂ÊÄÅ"
    fi
else
    echo "  ‚ùå activity_main.xmlÊñá‰ª∂‰∏çÂ≠òÂú®"
fi

# ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ
if [ -d "/app/workspace" ] && [ "$SCRIPT_DIR" = "/app" ]; then
    # DockerÁéØÂ¢É‰∏≠ÁöÑË∑ØÂæÑ
    CONFIG_FILE="/app/workspace/deploy/config.json"
    DOMAIN_MANAGER="/app/domain_manager.py"
    SIMPLE_DOMAIN_MANAGER="/app/simple_domain_manager.py"
    DOMAIN_CONFIGS_FILE="/app/domain_configs.json"
else
    # Êú¨Âú∞ÁéØÂ¢É‰∏≠ÁöÑË∑ØÂæÑ  
    CONFIG_FILE="$SCRIPT_DIR/config.json"
    DOMAIN_MANAGER="$SCRIPT_DIR/domain_manager.py"
    SIMPLE_DOMAIN_MANAGER="$SCRIPT_DIR/simple_domain_manager.py"
    DOMAIN_CONFIGS_FILE="$SCRIPT_DIR/domain_configs.json"
fi

# Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
if [ ! -f "$CONFIG_FILE" ]; then
    echo "ÈîôËØØÔºöÈÖçÁΩÆÊñá‰ª∂ $CONFIG_FILE ‰∏çÂ≠òÂú®"
    exit 1
fi

# Ê£ÄÊü•ÂüüÂêçÁÆ°ÁêÜÂô®ÊòØÂê¶Â≠òÂú®
if [ ! -f "$DOMAIN_MANAGER" ]; then
    echo "ÈîôËØØÔºöÂüüÂêçÁÆ°ÁêÜÂô® $DOMAIN_MANAGER ‰∏çÂ≠òÂú®"
    exit 1
fi

# ËØªÂèñÈÖçÁΩÆÊñá‰ª∂Ôºà‰ΩøÁî®PythonËß£ÊûêJSONÔºâ
echo "Ê≠£Âú®ËØªÂèñÈÖçÁΩÆÊñá‰ª∂..."
APP_NAME=$(python3 -c "import json; print(json.load(open('$CONFIG_FILE'))['app_name'])")
APP_URL=$(python3 -c "import json; print(json.load(open('$CONFIG_FILE'))['app_url'])")
ICON_FILE=$(python3 -c "import json; print(json.load(open('$CONFIG_FILE'))['icon_file'])")

# È™åËØÅÈÖçÁΩÆ
if [ "$APP_NAME" = "null" ] || [ "$APP_URL" = "null" ] || [ "$ICON_FILE" = "null" ]; then
    echo "ÈîôËØØÔºöÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈîôËØØÊàñÂ≠óÊÆµÁº∫Â§±"
    exit 1
fi

echo "ÈÖçÁΩÆ‰ø°ÊÅØÔºö"
echo "  AppÂêçÁß∞: $APP_NAME"
echo "  App URL: $APP_URL"
echo "  ÂõæÊ†áÊñá‰ª∂: $ICON_FILE"

# Ëé∑ÂèñÂüüÂêçÈÖçÁΩÆ
echo ""
echo "üîß Ëé∑ÂèñÂüüÂêçÈÖçÁΩÆ..."

# Â∞ùËØï‰ΩøÁî®ÁÆÄÂåñÁâàÂüüÂêçÁÆ°ÁêÜÂô®
if [ -f "$SIMPLE_DOMAIN_MANAGER" ]; then
    # Âè™ÊçïËé∑stdoutÔºåÂøΩÁï•stderr
    DOMAIN_CONFIG=$(python3 "$SIMPLE_DOMAIN_MANAGER" get "$APP_URL" 2>/dev/null)
    if [ $? -eq 0 ] && [ -n "$DOMAIN_CONFIG" ]; then
        echo "‚úÖ ‰ΩøÁî®ÁÆÄÂåñÁâàÂüüÂêçÁÆ°ÁêÜÂô®Ëé∑ÂèñÈÖçÁΩÆÊàêÂäü"
    else
        echo "‚ùå ÁÆÄÂåñÁâàÂüüÂêçÁÆ°ÁêÜÂô®‰πüÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ"
        DOMAIN_CONFIG=""
    fi
else
    # ÂõûÈÄÄÂà∞ÂéüÂßãÂüüÂêçÁÆ°ÁêÜÂô®
    DOMAIN_CONFIG=$(python3 "$DOMAIN_MANAGER" get "$APP_URL" 2>/dev/null)
    if [ $? -ne 0 ] || [ -z "$DOMAIN_CONFIG" ]; then
        echo "‚ùå Ëé∑ÂèñÂüüÂêçÈÖçÁΩÆÂ§±Ë¥•ÔºåÂ∞ùËØïÈáçÊñ∞ÂàùÂßãÂåñ..."
        
        # Á°Æ‰øùdomain_configs.jsonÊñá‰ª∂Â≠òÂú®‰∏îÊ†ºÂºèÊ≠£Á°Æ
        if [ ! -f "$DOMAIN_CONFIGS_FILE" ] || [ ! -s "$DOMAIN_CONFIGS_FILE" ]; then
            echo "{}" > "$DOMAIN_CONFIGS_FILE"
            echo "‚úÖ Â∑≤ÂàùÂßãÂåñdomain_configs.jsonÊñá‰ª∂"
        fi
        
        # ÈáçÊñ∞Â∞ùËØïËé∑ÂèñÈÖçÁΩÆ
        DOMAIN_CONFIG=$(python3 "$DOMAIN_MANAGER" get "$APP_URL" 2>/dev/null)
        if [ $? -ne 0 ] || [ -z "$DOMAIN_CONFIG" ]; then
            echo "‚ùå ‰ªçÁÑ∂Êó†Ê≥ïËé∑ÂèñÂüüÂêçÈÖçÁΩÆÔºå‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ"
            DOMAIN_CONFIG=""
        else
            echo "‚úÖ ÈáçÊñ∞Ëé∑ÂèñÂüüÂêçÈÖçÁΩÆÊàêÂäü"
        fi
    else
        echo "‚úÖ Ëé∑ÂèñÂüüÂêçÈÖçÁΩÆÊàêÂäü"
    fi
fi

# Âè™ÊúâÂú®ÊàêÂäüËé∑ÂèñÈÖçÁΩÆÊó∂ÊâçËß£Êûê
if [ -n "$DOMAIN_CONFIG" ] && [ "$DOMAIN_CONFIG" != "" ]; then
    echo "üîç Ëß£ÊûêÂüüÂêçÈÖçÁΩÆ..."
    echo "ÈÖçÁΩÆÂÜÖÂÆπ: $DOMAIN_CONFIG"
    
    # Ëß£ÊûêÂüüÂêçÈÖçÁΩÆ
    DOMAIN=$(echo "$DOMAIN_CONFIG" | python3 -c "import json, sys; config=json.load(sys.stdin); print(config['domain'])" 2>/dev/null)
    PACKAGE_NAME=$(echo "$DOMAIN_CONFIG" | python3 -c "import json, sys; config=json.load(sys.stdin); print(config['package_name'])" 2>/dev/null)
    KEYSTORE_PATH=$(echo "$DOMAIN_CONFIG" | python3 -c "import json, sys; config=json.load(sys.stdin); print(config['keystore_path'])" 2>/dev/null)
    KEYSTORE_PASSWORD=$(echo "$DOMAIN_CONFIG" | python3 -c "import json, sys; config=json.load(sys.stdin); print(config['keystore_password'])" 2>/dev/null)
    KEY_ALIAS=$(echo "$DOMAIN_CONFIG" | python3 -c "import json, sys; config=json.load(sys.stdin); print(config['key_alias'])" 2>/dev/null)
    KEY_PASSWORD=$(echo "$DOMAIN_CONFIG" | python3 -c "import json, sys; config=json.load(sys.stdin); print(config['key_password'])" 2>/dev/null)
    
    echo "Ëß£ÊûêÁªìÊûúÔºö"
    echo "  ÂüüÂêç: '$DOMAIN'"
    echo "  ÂåÖÂêç: '$PACKAGE_NAME'"  
    echo "  Á≠æÂêçÊñá‰ª∂: '$KEYSTORE_PATH'"
else
    echo "‚ùå ÂüüÂêçÈÖçÁΩÆ‰∏∫Á©∫Ôºå‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ"
    # ‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ
    DOMAIN="default"
    PACKAGE_NAME="com.jsmiao.webapp"
    KEYSTORE_PATH="../bluetooth.jks"
    KEYSTORE_PASSWORD="Appsdotapps"
    KEY_ALIAS="bluetooth"
    KEY_PASSWORD="Appsdotapps"
fi

echo ""
echo "ÂüüÂêçÈÖçÁΩÆ‰ø°ÊÅØÔºö"
echo "  ÂüüÂêç: $DOMAIN"
echo "  ÂåÖÂêç: $PACKAGE_NAME"
echo "  Á≠æÂêçÊñá‰ª∂: $KEYSTORE_PATH"
echo "  ÂØÜÈí•Âà´Âêç: $KEY_ALIAS"

# ÂàõÂª∫Âä®ÊÄÅÈÖçÁΩÆÊñá‰ª∂
echo ""
echo "üìù ÂàõÂª∫Âä®ÊÄÅÈÖçÁΩÆÊñá‰ª∂..."
DYNAMIC_CONFIG="$PROJECT_DIR/dynamic.properties"

# Á°Æ‰øùÁ≠æÂêçÊñá‰ª∂Ë∑ØÂæÑ‰∏ç‰∏∫Á©∫
if [ -z "$KEYSTORE_PATH" ] || [ "$KEYSTORE_PATH" = "null" ]; then
    echo "‚ùå ÈîôËØØÔºöÁ≠æÂêçÊñá‰ª∂Ë∑ØÂæÑ‰∏∫Á©∫"
    exit 1
fi

cat > "$DYNAMIC_CONFIG" << EOF
# Âä®ÊÄÅÈÖçÁΩÆÊñá‰ª∂ - Áî± auto_build.sh Ëá™Âä®ÁîüÊàê
app.domainName=$DOMAIN
app.packageName=$PACKAGE_NAME
# app.namespace=$PACKAGE_NAME
keystore.storeFile=$KEYSTORE_PATH
keystore.storePassword=$KEYSTORE_PASSWORD
keystore.alias=$KEY_ALIAS
keystore.keyPassword=$KEY_PASSWORD
EOF

echo "‚úÖ Âä®ÊÄÅÈÖçÁΩÆÊñá‰ª∂Â∑≤ÂàõÂª∫: $DYNAMIC_CONFIG"
echo "Á≠æÂêçÊñá‰ª∂Ë∑ØÂæÑ: $KEYSTORE_PATH"

# Ê£ÄÊü•ÂõæÊ†áÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
if [ -d "/app/workspace" ] && [ "$SCRIPT_DIR" = "/app" ]; then
    ICON_PATH="/app/workspace/deploy/$ICON_FILE"
else
    ICON_PATH="$SCRIPT_DIR/$ICON_FILE"
fi

if [ ! -f "$ICON_PATH" ]; then
    echo "ÈîôËØØÔºöÂõæÊ†áÊñá‰ª∂ $ICON_PATH ‰∏çÂ≠òÂú®"
    exit 1
fi

# 1. ÊõøÊç¢ÂõæÊ†áÂà∞ÂêÑ‰∏™mipmapÊñá‰ª∂Â§π
echo "Ê≠£Âú®ÊõøÊç¢Â∫îÁî®ÂõæÊ†á..."
MIPMAP_DIRS=(
    "mipmap-hdpi"
    "mipmap-mdpi"
    "mipmap-xhdpi"
    "mipmap-xxhdpi"
    "mipmap-xxxhdpi"
)

for dir in "${MIPMAP_DIRS[@]}"; do
    TARGET_DIR="$PROJECT_DIR/app/src/main/res/$dir"
    TARGET_FILE="$TARGET_DIR/ic_launcher.png"
    
    if [ -d "$TARGET_DIR" ]; then
        echo "  ÊõøÊç¢ $dir/ic_launcher.png"
        cp "$ICON_PATH" "$TARGET_FILE"
    else
        echo "  Ë≠¶ÂëäÔºöÁõÆÂΩï $TARGET_DIR ‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá"
    fi
done

# 2. ‰øÆÊîπMainActivity.java‰∏≠ÁöÑURLÂíåÂåÖÂêçÔºå‰ª•ÂèäAndroidManifest.xml
echo "Ê≠£Âú®‰øÆÊîπ MainActivity.java ‰∏≠ÁöÑ URL ÂíåÂåÖÂêç..."
MAINACTIVITY_DIR="$PROJECT_DIR/app/src/main/java/com/jsmiao/webapp"
MAINACTIVITY_FILE="$MAINACTIVITY_DIR/MainActivity.java"
ANDROIDMANIFEST_FILE="$PROJECT_DIR/app/src/main/AndroidManifest.xml"

# ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï
if [ -d "/app/workspace" ] && [ "$SCRIPT_DIR" = "/app" ]; then
    BACKUP_DIR="/app/workspace/deploy/backups"
else
    BACKUP_DIR="$SCRIPT_DIR/backups"
fi
mkdir -p "$BACKUP_DIR"

# ÂÖàÂàõÂª∫ÊâÄÊúâÊñá‰ª∂ÁöÑÂ§á‰ªΩ
if [ -f "$MAINACTIVITY_FILE" ]; then
    cp "$MAINACTIVITY_FILE" "$BACKUP_DIR/MainActivity.java.backup"
fi
if [ -f "$MAINACTIVITY_DIR/MyApplication.java" ]; then
    cp "$MAINACTIVITY_DIR/MyApplication.java" "$BACKUP_DIR/MyApplication.java.backup"
fi
if [ -f "$MAINACTIVITY_DIR/controls/MWebView.java" ]; then
    cp "$MAINACTIVITY_DIR/controls/MWebView.java" "$BACKUP_DIR/MWebView.java.backup"
fi
if [ -f "$ANDROIDMANIFEST_FILE" ]; then
    cp "$ANDROIDMANIFEST_FILE" "$BACKUP_DIR/AndroidManifest.xml.backup"
fi

# Â¶ÇÊûúÂåÖÂêçÂèëÁîüÂèòÂåñÔºåÈúÄË¶ÅÂà†Èô§ÊóßÁõÆÂΩïÁöÑÊñá‰ª∂
NEW_PACKAGE_DIR="$PROJECT_DIR/app/src/main/java/$(echo $PACKAGE_NAME | tr '.' '/')"

if [ "$PACKAGE_NAME" != "com.jsmiao.webapp" ]; then
    echo "  ÂåÖÂêçÂ∑≤ÂèòÊõ¥ÔºåÈáçÊñ∞ÁªÑÁªáÁõÆÂΩïÁªìÊûÑ..."
    echo "  Êñ∞ÂåÖÂêçÁõÆÂΩï: $NEW_PACKAGE_DIR"
    
    # Ê£ÄÊü•Ê∫êÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
    echo "  Ê£ÄÊü•Ê∫êÊñá‰ª∂: $MAINACTIVITY_DIR/MainActivity.java"
    if [ ! -f "$MAINACTIVITY_DIR/MainActivity.java" ]; then
        echo "ÈîôËØØÔºöÊ∫êÊñá‰ª∂ MainActivity.java ‰∏çÂ≠òÂú®: $MAINACTIVITY_DIR/MainActivity.java"
        echo "Â∞ùËØïÂàóÂá∫ÁõÆÂΩïÂÜÖÂÆπ:"
        ls -la "$MAINACTIVITY_DIR/" 2>/dev/null || echo "ÁõÆÂΩï‰∏çÂ≠òÂú®"
        ls -la "$PROJECT_DIR/app/src/main/java/" 2>/dev/null || echo "javaÁõÆÂΩï‰∏çÂ≠òÂú®"
        find "$PROJECT_DIR/app/src/main/java/" -name "*.java" -type f 2>/dev/null || echo "Êú™ÊâæÂà∞javaÊñá‰ª∂"
        exit 1
    fi
    
    # ÂàõÂª∫Êñ∞ÁöÑÂåÖÂêçÁõÆÂΩï
    mkdir -p "$NEW_PACKAGE_DIR/controls"
    
    # ÂÆâÂÖ®Âú∞Â§çÂà∂Êñá‰ª∂ÔºàËÄå‰∏çÊòØÁßªÂä®ÔºâÔºå‰øùÊåÅÂéüÂßãÊñá‰ª∂‰∏çÂèò
    echo "  Â§çÂà∂Êñá‰ª∂Âà∞Êñ∞ÂåÖÂêçÁõÆÂΩï..."
    
    if [ -f "$MAINACTIVITY_DIR/MainActivity.java" ]; then
        cp "$MAINACTIVITY_DIR/MainActivity.java" "$NEW_PACKAGE_DIR/MainActivity.java" || {
            echo "ÈîôËØØÔºöÊó†Ê≥ïÂ§çÂà∂ MainActivity.java"
            exit 1
        }
        echo "    ‚úÖ MainActivity.java Â∑≤Â§çÂà∂"
    fi
    
    if [ -f "$MAINACTIVITY_DIR/MyApplication.java" ]; then
        cp "$MAINACTIVITY_DIR/MyApplication.java" "$NEW_PACKAGE_DIR/MyApplication.java" || {
            echo "ÈîôËØØÔºöÊó†Ê≥ïÂ§çÂà∂ MyApplication.java"
            exit 1
        }
        echo "    ‚úÖ MyApplication.java Â∑≤Â§çÂà∂"
    fi
    
    if [ -f "$MAINACTIVITY_DIR/controls/MWebView.java" ]; then
        cp "$MAINACTIVITY_DIR/controls/MWebView.java" "$NEW_PACKAGE_DIR/controls/MWebView.java" || {
            echo "ÈîôËØØÔºöÊó†Ê≥ïÂ§çÂà∂ MWebView.java"
            exit 1
        }
        echo "    ‚úÖ MWebView.java Â∑≤Â§çÂà∂"
    fi
    
    echo "  ‚úÖ Êñá‰ª∂Â∑≤Â§çÂà∂Âà∞Êñ∞ÂåÖÂêçÁõÆÂΩï"
    
    # Êõ¥Êñ∞ÊâÄÊúâJavaÊñá‰ª∂ÁöÑË∑ØÂæÑÔºàÊåáÂêëÊñ∞ÁõÆÂΩïÔºâ
    MAINACTIVITY_FILE="$NEW_PACKAGE_DIR/MainActivity.java"
    MYAPPLICATION_FILE="$NEW_PACKAGE_DIR/MyApplication.java"
    MWEBVIEW_FILE="$NEW_PACKAGE_DIR/controls/MWebView.java"
else
    MYAPPLICATION_FILE="$MAINACTIVITY_DIR/MyApplication.java"
    MWEBVIEW_FILE="$MAINACTIVITY_DIR/controls/MWebView.java"
fi

if [ ! -f "$MAINACTIVITY_FILE" ]; then
    echo "ÈîôËØØÔºöMainActivity.java Êñá‰ª∂‰∏çÂ≠òÂú®: $MAINACTIVITY_FILE"
    exit 1
fi

if [ ! -f "$ANDROIDMANIFEST_FILE" ]; then
    echo "ÈîôËØØÔºöAndroidManifest.xml Êñá‰ª∂‰∏çÂ≠òÂú®: $ANDROIDMANIFEST_FILE"
    exit 1
fi

# ‰ΩøÁî®PythonÊõøÊç¢MainActivity.java‰∏≠ÁöÑURLÂíåÂåÖÂêç
python3 -c "
import re
import sys

# ËØªÂèñÊñá‰ª∂
with open('$MAINACTIVITY_FILE', 'r') as f:
    content = f.read()

# ÊõøÊç¢ÂåÖÂêçÂ£∞ÊòéÔºàÂè™ÊúâÂåÖÂêç‰∏çÂêåÊó∂ÊâçÊõøÊç¢Ôºâ
if '$PACKAGE_NAME' != 'com.jsmiao.webapp':
    content = re.sub(r'^package\s+[^;]+;', 'package $PACKAGE_NAME;', content, flags=re.MULTILINE)
    # Ê∑ªÂä†RÁ±ªÁöÑÊ≠£Á°Æimport
    # ÂÖàÂà†Èô§‰ªª‰ΩïÂ∑≤Â≠òÂú®ÁöÑRÁ±ªimport
    content = re.sub(r'import\s+[^;]*\.R;\s*\n', '', content, flags=re.MULTILINE)
    # Âú®androidx.appcompat.app.AppCompatActivityÂêéÊ∑ªÂä†RÁ±ªimport
    content = re.sub(r'(import androidx\.appcompat\.app\.AppCompatActivity;\s*\n)', r'\1import com.jsmiao.webapp.R;\n', content)

# ÊõøÊç¢ÂØºÂÖ•ËØ≠Âè•‰∏≠ÁöÑÂåÖÂêçÔºàÂè™ÊúâÂåÖÂêç‰∏çÂêåÊó∂ÊâçÊõøÊç¢Ôºâ
if '$PACKAGE_NAME' != 'com.jsmiao.webapp':
    content = re.sub(r'import\s+com\.jsmiao\.webapp\.controls', 'import $PACKAGE_NAME.controls', content, flags=re.MULTILINE)

# ÊõøÊç¢URL
pattern = r'^(\s*String url = \")[^\"]*(\";).*$'
replacement = r'\1$APP_URL\2'
content = re.sub(pattern, replacement, content, flags=re.MULTILINE)

# ÂÜôÂõûÊñá‰ª∂
with open('$MAINACTIVITY_FILE', 'w') as f:
    f.write(content)
"

# Êõ¥Êñ∞ÂÖ∂‰ªñJavaÊñá‰ª∂ÁöÑÂåÖÂêç
if [ "$PACKAGE_NAME" != "com.jsmiao.webapp" ]; then
    echo "  Êõ¥Êñ∞ÂÖ∂‰ªñJavaÊñá‰ª∂ÁöÑÂåÖÂêç..."
    
    # Êõ¥Êñ∞MyApplication.java
    if [ -f "$MYAPPLICATION_FILE" ]; then
        python3 -c "
import re
with open('$MYAPPLICATION_FILE', 'r') as f:
    content = f.read()
content = re.sub(r'^package\s+[^;]+;', 'package $PACKAGE_NAME;', content, flags=re.MULTILINE)
content = re.sub(r'import\s+com\.jsmiao\.webapp\.', 'import $PACKAGE_NAME.', content, flags=re.MULTILINE)
with open('$MYAPPLICATION_FILE', 'w') as f:
    f.write(content)
"
    fi
    
    # Êõ¥Êñ∞MWebView.java
    if [ -f "$MWEBVIEW_FILE" ]; then
        python3 -c "
import re
with open('$MWEBVIEW_FILE', 'r') as f:
    content = f.read()
content = re.sub(r'^package\s+[^;]+;', 'package $PACKAGE_NAME.controls;', content, flags=re.MULTILINE)
content = re.sub(r'import\s+com\.jsmiao\.webapp\.', 'import $PACKAGE_NAME.', content, flags=re.MULTILINE)
with open('$MWEBVIEW_FILE', 'w') as f:
    f.write(content)
"
    fi
fi

# ‰ΩøÁî®PythonÊõøÊç¢AndroidManifest.xml‰∏≠ÁöÑÂåÖÂêçÂºïÁî®ÔºàÂ¶ÇÊûúÂåÖÂêçÂèòÂåñÔºâ
if [ "$PACKAGE_NAME" != "com.jsmiao.webapp" ]; then
    echo "  Êõ¥Êñ∞AndroidManifest.xml‰∏≠ÁöÑÂåÖÂêçÂºïÁî®..."
    python3 -c "
import re
import sys

# ËØªÂèñÊñá‰ª∂
with open('$ANDROIDMANIFEST_FILE', 'r') as f:
    content = f.read()

# ÊõøÊç¢activity nameÂºïÁî®Ôºå‰ªéÁõ∏ÂØπË∑ØÂæÑÊîπ‰∏∫ÁªùÂØπË∑ØÂæÑ
content = re.sub(r'android:name=\"\.MainActivity\"', 'android:name=\"$PACKAGE_NAME.MainActivity\"', content)
content = re.sub(r'android:name=\"\.MyApplication\"', 'android:name=\"$PACKAGE_NAME.MyApplication\"', content) 

# ÂÜôÂõûÊñá‰ª∂
with open('$ANDROIDMANIFEST_FILE', 'w') as f:
    f.write(content)
"
fi

echo "  URL Â∑≤Êõ¥Êñ∞‰∏∫: $APP_URL"

# 3. ‰øÆÊîπstrings.xml‰∏≠ÁöÑAppÂêçÁß∞
echo "Ê≠£Âú®‰øÆÊîπ strings.xml ‰∏≠ÁöÑ App ÂêçÁß∞..."
STRINGS_FILE="$PROJECT_DIR/app/src/main/res/values/strings.xml"

if [ ! -f "$STRINGS_FILE" ]; then
    echo "ÈîôËØØÔºöstrings.xml Êñá‰ª∂‰∏çÂ≠òÂú®"
    exit 1
fi

# ÂàõÂª∫Â§á‰ªΩ
cp "$STRINGS_FILE" "$BACKUP_DIR/strings.xml.backup"

# ‰ΩøÁî®sedÊõøÊç¢AppÂêçÁß∞
sed -i.tmp "s|<string name=\"app_name\">[^<]*</string>|<string name=\"app_name\">$APP_NAME</string>|g" "$STRINGS_FILE"
rm -f "$STRINGS_FILE.tmp"

echo "  App ÂêçÁß∞Â∑≤Êõ¥Êñ∞‰∏∫: $APP_NAME"

# 3.5. ‰øÆÊîπactivity_main.xml‰∏≠ÁöÑMWebViewÂåÖÂêçÂºïÁî®
echo "Ê≠£Âú®‰øÆÊîπ activity_main.xml ‰∏≠ÁöÑÂåÖÂêçÂºïÁî®..."
ACTIVITY_MAIN_FILE="$PROJECT_DIR/app/src/main/res/layout/activity_main.xml"

if [ -f "$ACTIVITY_MAIN_FILE" ]; then
    # ÂàõÂª∫Â§á‰ªΩ
    cp "$ACTIVITY_MAIN_FILE" "$BACKUP_DIR/activity_main.xml.backup"
    
    # ÊõøÊç¢MWebViewÁöÑÂåÖÂêçÂºïÁî®
    if [ "$PACKAGE_NAME" != "com.jsmiao.webapp" ]; then
        sed -i.tmp "s|com.jsmiao.webapp.controls.MWebView|$PACKAGE_NAME.controls.MWebView|g" "$ACTIVITY_MAIN_FILE"
        rm -f "$ACTIVITY_MAIN_FILE.tmp"
        echo "  activity_main.xml ‰∏≠ÁöÑÂåÖÂêçÂºïÁî®Â∑≤Êõ¥Êñ∞"
    fi
else
    echo "  Ë≠¶ÂëäÔºöactivity_main.xml Êñá‰ª∂‰∏çÂ≠òÂú®"
fi

# 4. Ê∏ÖÁêÜ‰πãÂâçÁöÑÊûÑÂª∫Êñá‰ª∂
echo "Ê≠£Âú®Ê∏ÖÁêÜ‰πãÂâçÁöÑÊûÑÂª∫Êñá‰ª∂..."
cd "$PROJECT_DIR"
# Âà†Èô§deployÁõÆÂΩï‰∏ãÁöÑÊóßAPKÊñá‰ª∂
rm -f "$SCRIPT_DIR"/*-app.apk 2>/dev/null || true
./gradlew clean

# 5. ÊûÑÂª∫APK
echo ""
echo "üöÄ ÂºÄÂßãÊûÑÂª∫APK..."
echo "ËøôÂèØËÉΩÈúÄË¶ÅÂá†ÂàÜÈíüÊó∂Èó¥ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ..."
echo ""

# ÊûÑÂª∫ReleaseÁâàÊú¨
./gradlew assembleRelease

# Ê£ÄÊü•ÊûÑÂª∫ÊòØÂê¶ÊàêÂäü
if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ APKÊûÑÂª∫ÊàêÂäüÔºÅ"
    
    # Êü•ÊâæÁîüÊàêÁöÑAPKÊñá‰ª∂
    APK_DIR="$PROJECT_DIR/app/build/outputs/apk/release"
    if [ -d "$APK_DIR" ]; then
        echo ""
        echo "üì¶ ÁîüÊàêÁöÑAPKÊñá‰ª∂‰ΩçÁΩÆÔºö"
        find "$APK_DIR" -name "*.apk" -type f | while read apk_file; do
            echo "  - $apk_file"
            # ÊòæÁ§∫Êñá‰ª∂Â§ßÂ∞è
            size=$(du -h "$apk_file" | cut -f1)
            echo "    Â§ßÂ∞è: $size"
        done
        
        # Â§çÂà∂APKÂà∞deployÁõÆÂΩï (‰ΩøÁî®ÂüüÂêçÂëΩÂêç)
        latest_apk=$(find "$APK_DIR" -name "*-app.apk" -type f | head -1)
        if [ -n "$latest_apk" ]; then
            deploy_apk="$SCRIPT_DIR/${DOMAIN}-app.apk"
            cp "$latest_apk" "$deploy_apk"
            echo ""
            echo "‚úÖ APKÂ∑≤Â§çÂà∂Âà∞: $deploy_apk"
            echo "üéØ ÂèØÁõ¥Êé•ÂÆâË£ÖÊ≠§APKÊñá‰ª∂"
            echo "üì± ÂåÖÂêç: $PACKAGE_NAME"
            echo "üåê ÂüüÂêç: $DOMAIN"
        fi
    fi
    
    echo ""
    echo "üéä ÂÖ®ÈÉ®ÂÆåÊàêÔºÅÂüüÂêç $DOMAIN ÁöÑÂ∫îÁî®ÈÖçÁΩÆÂíåÊûÑÂª∫ÈÉΩÂ∑≤ÂÆåÊàê„ÄÇ"
    echo "üì¶ ÂåÖÂêç: $PACKAGE_NAME"
    echo "üîê Á≠æÂêç: $KEYSTORE_PATH"
else
    echo ""
    echo "‚ùå APKÊûÑÂª∫Â§±Ë¥•ÔºÅ"
    echo "ËØ∑Ê£ÄÊü•ÊûÑÂª∫ÈîôËØØ‰ø°ÊÅØÔºåÊàñÊâãÂä®ËøêË°å ./gradlew assembleRelease"
    exit 1
fi

# Ê∏ÖÁêÜÂä®ÊÄÅÈÖçÁΩÆÊñá‰ª∂
if [ -f "$DYNAMIC_CONFIG" ]; then
    rm -f "$DYNAMIC_CONFIG"
    echo "üßπ Â∑≤Ê∏ÖÁêÜ‰∏¥Êó∂ÈÖçÁΩÆÊñá‰ª∂"
fi

echo ""
echo "üìù Â§á‰ªΩÊñá‰ª∂Â∑≤‰øùÂ≠òÂà∞: $BACKUP_DIR" 
echo "  - MainActivity.java.backup"
echo "  - strings.xml.backup"
echo ""
echo "Â¶ÇÈúÄÊÅ¢Â§çÔºåËØ∑ËøêË°å: ./restore_backup.sh"