apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

// 动态配置文件支持
def dynamicConfigFile = rootProject.file("dynamic.properties")
def dynamicConfig = new Properties()
if (dynamicConfigFile.exists()) {
    dynamicConfig.load(new FileInputStream(dynamicConfigFile))
}

android {
    namespace dynamicConfig.getProperty('app.namespace', 'com.jsmiao.webapp')
    compileSdk 34

    defaultConfig {
        applicationId dynamicConfig.getProperty('app.packageName', 'com.jsmiao.webapp')
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // 禁用APK拆分，生成单一APK文件
        splits {
            abi {
                enable false
                reset()
                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                universalApk true
            }
        }
    }

    signingConfigs {
        release {
            keyAlias dynamicConfig.getProperty('keystore.alias', keystoreProperties['keyAlias'])
            keyPassword dynamicConfig.getProperty('keystore.keyPassword', keystoreProperties['keyPassword'])
            storeFile file(dynamicConfig.getProperty('keystore.storeFile', keystoreProperties['storeFile']))
            storePassword dynamicConfig.getProperty('keystore.storePassword', keystoreProperties['storePassword'])
            v1SigningEnabled true
            v2SigningEnabled true
        }
        
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // 自定义APK输出名称
            applicationVariants.all { variant ->
                variant.outputs.all {
                    def domainName = dynamicConfig.getProperty('app.domainName', 'default')
                    outputFileName = "${domainName}-app.apk"
                }
            }
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}